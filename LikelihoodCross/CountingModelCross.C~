using namespace RooFit;
using namespace RooStats;

void CountingModelCross(  int nobs_1 = 27,           // number of observed events
			   double b_1 = 0.09,           // number of background events
			   double sigmab_1 = 0.16,     // relative uncertainty in b 1
			   
			   int nobs_2 = 30,           // number of observed events
			   double b_2 = 0.47,           // number of background events
			   double sigmab_2 = 0.26,    // relative uncertainty in b 2
			   
			   
			   int nobs_3 = 8,           // number of observed events
			   double b_3 = 0.44,           // number of background events
			   double sigmab_3 = 0.35    // relative uncertainty in b 2
			   )
  
{
  RooWorkspace w("w");
  
  // make Poisson model * Gaussian constraint
  w.factory("prod:s_1(cross[14700,0.,10000000],BR_1[0.5,0,1],Acc_1[0.5,0.,1.],Lumi[2.229,0.,10000])");  
  w.factory("prod:s_2(cross[14700,0.,10000000],BR_2[0.5,0,1],Acc_2[0.5,0.,1.],Lumi[2.229,0.,10000])");  
  w.factory("prod:s_3(cross[14700,0.,10000000],BR_3[0.5,0,1],Acc_3[0.5,0.,1.],Lumi[2.229,0.,10000])");  

  w.factory("sum:nexp_1(s_1,b_1[1,0,10])");
  w.factory("sum:nexp_2(s_2,b_2[1,0,10])");
  w.factory("sum:nexp_3(s_3,b_3[1,0,10])");
  
  w.var("b_1")->setVal(b_1);
  w.var("b_2")->setVal(b_2);
  w.var("b_3")->setVal(b_3);

  // Poisson of (n | s+b)
  w.factory("Poisson:pdf_1(nobs_1[0,50],nexp_1)");
  w.factory("Poisson:pdf_2(nobs_2[0,50],nexp_2)");
  w.factory("Poisson:pdf_3(nobs_3[0,50],nexp_3)");

  w.factory("Gaussian:constraint_1(b0_1[0,10],b_1,sigmab_1[1])");
  w.factory("Gaussian:constraint_2(b0_2[0,10],b_2,sigmab_2[1])");
  w.factory("Gaussian:constraint_3(b0_3[0,10],b_3,sigmab_3[1])");

  w.factory("Gaussian:constraintAcc_1(Acc0_1[0,1],Acc_1,sigmaAcc_1[1])");
  w.factory("Gaussian:constraintAcc_2(Acc0_2[0,1],Acc_2,sigmaAcc_2[1])");
  w.factory("Gaussian:constraintAcc_3(Acc0_3[0,1],Acc_3,sigmaAcc_3[1])");


  w.factory("PROD:model_1(pdf_1,constraint_1,constraintAcc_1)");
  w.factory("PROD:model_2(pdf_2,constraint_2,constraintAcc_2)");
  w.factory("PROD:model_3(pdf_3,constraint_3,constraintAcc_3)");

  w.factory("PROD:model(model_1,model_2,model_3)");

  w.var("b0_1")->setVal(b_1);
  w.var("b0_2")->setVal(b_2);
  w.var("b0_3")->setVal(b_3);

  w.var("b0_1")->setConstant(true); // needed for being treated as global observables
  w.var("b0_2")->setConstant(true); // needed for being treated as global observables
  w.var("b0_3")->setConstant(true); // needed for being treated as global observables


  // w.var("Acc_1")->setVal(0.844);
  // w.var("Acc_2")->setVal(0.694);
  // w.var("Acc_3")->setVal(0.60);

  
  Float_t Acc_1 = 0.844*0.5388;
  Float_t Acc_2 = 0.694*0.5388;
  Float_t Acc_3 = 0.60*0.5388;
  
 
  w.var("Acc_1")->setVal(Acc_1);
  w.var("Acc_2")->setVal(Acc_2);
  w.var("Acc_3")->setVal(0.60*0.5388);


  w.var("Acc0_1")->setVal(Acc_1);
  w.var("Acc0_2")->setVal(Acc_2);
  w.var("Acc0_3")->setVal(0.60*0.5388);


  w.var("Acc0_1")->setConstant(true); // needed for being treated as global observables
  w.var("Acc0_2")->setConstant(true); // needed for being treated as global observables
  w.var("Acc0_3")->setConstant(true); // needed for being treated as global observables

  Float_t  sigmaAcc_1 = 0.0097 ;
  Float_t  sigmaAcc_2 = 0.0097 ;
  Float_t  sigmaAcc_3 = 0.0097 ;

  Float_t BRele = 0.03363;
  Float_t BRmu  = 0.03366;  

  Float_t BR_1 = BRmu*BRmu;
  Float_t BR_2 = 2*BRmu*BRele;
  Float_t BR_3 = BRele*BRele;

  Float_t BR = BR_1+BR_2+BR_3;


  cout<<"BR "<<BR<<endl;

  w.var("BR_1")->setVal(BR_1);
  w.var("BR_2")->setVal(BR_2);
  w.var("BR_3")->setVal(BR_3);

  w.var("BR_1")->setConstant(true); // needed for being treated as global observables
  w.var("BR_2")->setConstant(true); // needed for being treated as global observables
  w.var("BR_3")->setConstant(true); // needed for being treated as global observables

  w.var("Lumi")->setVal(2.560);
  w.var("Lumi")->setConstant(true); 

  w.var("sigmab_1")->setVal(sigmab_1*b_1);  
  w.var("sigmab_2")->setVal(sigmab_2*b_2);  
  w.var("sigmab_3")->setVal(sigmab_3*b_3);  

  w.var("sigmaAcc_1")->setVal(sigmaAcc_1*Acc_1);  
  w.var("sigmaAcc_2")->setVal(sigmaAcc_2*Acc_2);  
  w.var("sigmaAcc_3")->setVal(sigmaAcc_3*Acc_3);  
  
  ModelConfig mc("ModelConfig",&w);
  
   mc.SetPdf(*w.pdf("model"));
   mc.SetParametersOfInterest(*w.var("cross"));
  
   mc.SetObservables(RooArgSet(*w.var("nobs_1"),*w.var("nobs_2"),*w.var("nobs_3")));  
  // mc.SetNuisanceParameters(RooArgSet(*w.var("b_1"),*w.var("b_2"),*w.var("b_3")));

   //mc.SetObservables(RooArgSet(*w.var("nobs_1"),*w.var("nobs_2")));  
   //   mc.SetNuisanceParameters(RooArgSet(*w.var("b_1"),*w.var("b_2"),*w.var("Acc_1"),*w.var("Acc_2")));
   mc.SetNuisanceParameters(RooArgSet(*w.var("b_1"),*w.var("b_2"),*w.var("b_3"),*w.var("Acc_1"),*w.var("Acc_2"),*w.var("Acc_3")));

   mc.SetParametersOfInterest(*w.var("cross"));

  // these are needed for the hypothesis tests
  mc.SetSnapshot(*w.var("cross"));
  //  mc.SetGlobalObservables(RooArgSet(*w.var("b0_1"),*w.var("b0_2"),*w.var("b0_3")));


  mc.Print();
  // import model in the workspace 

  w.import(mc);

  // make data set with the namber of observed events
  RooDataSet data("data","", RooArgSet(*w.var("nobs_1"),*w.var("nobs_2"),*w.var("nobs_3")));
  //RooDataSet data("data","", RooArgSet(*w.var("nobs_1"),*w.var("nobs_2")));


  w.var("nobs_1")->setVal(nobs_1);
  data.add(*w.var("nobs_1") );

  w.var("nobs_2")->setVal(nobs_2);
  data.add(*w.var("nobs_2") );

  w.var("nobs_3")->setVal(nobs_3);
  data.add(*w.var("nobs_3") );

  // import data set in workspace and save it in a file

  ProfileLikelihoodCalculator pl(data, mc);
  pl.SetConfidenceLevel(0.68); // 95% interval
  LikelihoodInterval* interval = pl.GetInterval();

  // print out the iterval on the first Parameter of Interest
  RooRealVar* firstPOI = (RooRealVar*) mc.GetParametersOfInterest()->first();
  cout << "\n65% interval on " <<firstPOI->GetName()<<" is : ["<<
    interval->LowerLimit(*firstPOI) << ", "<<
    interval->UpperLimit(*firstPOI) <<"] "<<endl;

  //  std::cout<<"Cross "<<mc.GetParametersOfInterest()->getRealValue("cross")*BR_1<<std::endl;

  w.import(data);

  w.Print();

  TString fileName = "CountingModel.root"; 

  // write workspace in the file (recreate file if already existing)
  w.writeToFile(fileName, true);

}
